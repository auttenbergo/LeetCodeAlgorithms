/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    double sumOfVectorValues(vector<TreeNode*>& v){
        double rv = 0;
        for(int i=0; i<v.size();i++){
            rv += v[i]->val;
        }
        return rv;
    }
    vector<double> averageOfLevels(TreeNode* root) {
        vector<double> result;
        queue<TreeNode*> bfs;
        bfs.push(root);
        while(!bfs.empty()){
            vector<TreeNode*> nodes;
            
            while(!bfs.empty()){
                TreeNode* node = bfs.front();
                bfs.pop();
                if(node == NULL)
                    continue;
                nodes.push_back(node);
            }
            for(int i=0; i<nodes.size();i++){
                TreeNode* node = nodes[i];

                if(node->left != NULL)
                    bfs.push(node->left);
                if(node->right != NULL)
                    bfs.push(node->right);
            }
            if(nodes.size() == 0)
                break;
            double avg = sumOfVectorValues(nodes) / nodes.size();
            result.push_back(avg);
        }
        return result;
    }
};