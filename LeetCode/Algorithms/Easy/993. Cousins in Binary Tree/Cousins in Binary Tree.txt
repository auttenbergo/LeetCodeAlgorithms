/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    pair<TreeNode*,int> getParentAndDepth(TreeNode* root,TreeNode* parent, int target, int depth){
        if(root == NULL)
            return pair<TreeNode*,int>(NULL,0);
        if(root->val == target){
            return pair<TreeNode*,int>(parent,depth);
        }
        
        pair<TreeNode*,int> left = getParentAndDepth(root->left,root,target,depth+1);
        if(left.second != 0)
            return left;
        return getParentAndDepth(root->right,root,target,depth+1);
    }
    bool isCousins(TreeNode* root, int x, int y) {
        pair<TreeNode*,int> forX = getParentAndDepth(root,NULL,x,1);
        pair<TreeNode*,int> forY = getParentAndDepth(root,NULL,y,1);
        
        return forX.first != forY.first && forX.second == forY.second;
    }
};