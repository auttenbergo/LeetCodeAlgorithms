class Solution {
public:
    
    bool inBounds(vector<vector<int>>& board,int x,int y){
        return x >= 0 && x < board.size() && y >=0 && y < board[x].size();
    }
    
    int getAliveNeighbors(vector<vector<int>>& board,int x,int y){
        int result = 0;
        
        for(int i=-1; i<=1; i++){
            for(int j=-1; j<=1; j++){
                if(i == 0 && j == 0)
                    continue;
                
                int xx = x + i;
                int yy = y + j;
                
                if(!inBounds(board,xx,yy))
                    continue;
                
                result += board[xx][yy];
            }
        }
        
        return result;
    }
    
    void gameOfLife(vector<vector<int>>& board) {
        vector<vector<int>> boardCopy = board;
        
        for(int i=0;i<board.size();i++){
            for(int j=0;j<board[i].size();j++){
                int alive = getAliveNeighbors(boardCopy,i,j);
                
                if(board[i][j] == 0){
                    if(alive == 3)
                        board[i][j] = 1;
                } else {
                    if(alive < 2 || alive > 3)
                        board[i][j] = 0;
         
                }
            }
        }
    }
};