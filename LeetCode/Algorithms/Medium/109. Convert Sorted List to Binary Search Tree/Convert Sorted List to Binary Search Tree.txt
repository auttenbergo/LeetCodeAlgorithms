/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    void addNodeToBST(TreeNode* root,int elem){
        if(root == NULL){
            return;
        }
        
        if(root->val <= elem && root->right == NULL){
            root->right = new TreeNode(elem);
            return;
        }
        if(root->val > elem && root->left == NULL){
            root->left = new TreeNode(elem);
            return;
        }
        
        if(root->val <= elem){
            addNodeToBST(root->right,elem);
        } else {
            addNodeToBST(root->left,elem);
        }
    }
    
    void buildBST(TreeNode* root,vector<int>& nums,int leftIndex,int rightIndex){
        if(leftIndex > rightIndex)
            return;
        
        int middle = leftIndex + (rightIndex - leftIndex) / 2;
        addNodeToBST(root,nums[middle]);
        
        buildBST(root,nums,leftIndex,middle-1);
        buildBST(root,nums,middle+1,rightIndex);
    }
    
    TreeNode* sortedListToBST(ListNode* head) {
        if(head == NULL)
            return NULL;
        
        vector<int> values;
        while(head != NULL){
            values.push_back(head->val);
            head = head->next;
        }
        
        int middle = values.size() / 2;
        
        TreeNode* root = new TreeNode(values[middle]);
        buildBST(root,values,0,middle-1);
        buildBST(root,values,middle+1,values.size()-1);
       
        
        return root;
    }
};