class Solution {
public:
    
    struct Location{
        int x;
        int y;
        
        Location(int x1,int y1){
            x = x1;
            y = y1;
        }
    };
    
    bool inBounds(vector<vector<char>>& grid, Location& location){
        if(location.x >= 0 && location.x < grid.size() && location.y >= 0 && location.y < grid[0].size())
            return true;
        return false;
    }
    
    bool isNotVisited(vector<vector<bool>>& visited,Location& location){
        return !visited[location.x][location.y];
    }
    
    bool isIsland(vector<vector<char>>& grid,Location& location){
        return grid[location.x][location.y] == '1';
    }
    
    int numIslands(vector<vector<char>>& grid) {
        vector<vector<bool>> visited;
        for(int i=0; i<grid.size(); i++)
            visited.push_back(vector<bool>(grid[0].size(),false));
        
        int numberOfIslands = 0;
        
        for(int i=0; i<grid.size(); i++){
            for(int j=0; j<grid[0].size(); j++){
                if(visited[i][j] == true || grid[i][j] == '0')
                    continue;
                
                Location start(i,j);
                visited[i][j] = true;
                queue<Location> bfs;
                bfs.push(start);
                while(!bfs.empty()){
                    Location current = bfs.front();
                    bfs.pop();
                    
                    Location top(current.x-1,current.y);
                    Location right(current.x,current.y+1);
                    Location bottom(current.x+1,current.y);
                    Location left(current.x,current.y-1);
                    
                    if(inBounds(grid,top) && isIsland(grid,top) && isNotVisited(visited,top)){
                        visited[top.x][top.y] = true;
                        bfs.push(top);
                    }
                    if(inBounds(grid,right) && isIsland(grid,right) && isNotVisited(visited,right)){
                        visited[right.x][right.y] = true;
                        bfs.push(right);
                    }
                    if(inBounds(grid,bottom) && isIsland(grid,bottom) && isNotVisited(visited,bottom)){
                        visited[bottom.x][bottom.y] = true;
                        bfs.push(bottom);
                    }
                    if(inBounds(grid,left) && isIsland(grid,left) && isNotVisited(visited,left)){
                        visited[left.x][left.y] = true;
                        bfs.push(left);
                    }
                    
                }
                numberOfIslands++;
                
            }
        }
        
        return numberOfIslands;
    }
};