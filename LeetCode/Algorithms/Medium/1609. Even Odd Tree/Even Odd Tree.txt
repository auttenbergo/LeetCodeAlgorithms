/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isEvenOddTree(TreeNode* root) {
        bool shouldBeOdd = true;
        
        queue<TreeNode*> bfs;
        bfs.push(root);
        
        while(!bfs.empty()){
            int size = bfs.size();
            
            int lastValue = (shouldBeOdd) ? (INT_MIN) : (INT_MAX);
            
            for(int i=0; i<size;i++){
                TreeNode* current = bfs.front();
                bfs.pop();
                if(current != NULL){
                    bfs.push(current->left);
                    bfs.push(current->right);
                    
                    if(shouldBeOdd && (current->val % 2 == 0 || current->val <= lastValue))
                        return false;
                    else if(!shouldBeOdd && (current->val % 2 != 0 || current->val >= lastValue))
                        return false;
                    
                    lastValue = current->val;
                    
                }
            }
            shouldBeOdd = !shouldBeOdd;
        }
        return true;
    }
};